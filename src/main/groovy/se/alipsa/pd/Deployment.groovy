/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package se.alipsa.pd

import java.nio.channels.Channels
import java.nio.channels.FileChannel
import java.nio.channels.ReadableByteChannel
import java.nio.file.Files

class Deployment {

    String sshUser = null
    String sshPassword = null
    String targetHost
    Ssh ssh

    Deployment(String sshUser, String sshPassword, String targetHost) {
        this.sshUser = sshUser
        this.sshPassword = sshPassword
        this.targetHost = targetHost
        ssh = new Ssh(targetHost, sshUser, sshPassword)
    }

    void createUser(String userName) {

    }

    void createService(String serviceName) {

    }

    void stopService(String serviceName) {

    }

    void startService(String serviceName) {

    }

    /**
     *
     * @param from the url to pull the resource from
     * @param to the target path on the server to put the file on
     */
    void copy(URL from, String to) throws IOException {
        // apache.sshd does not allow streaming without knowing the size in advance so we need to download first
        def tmpFile = File.createTempFile("copy", ".tmp")
        try (ReadableByteChannel channel = Channels.newChannel(from.openStream())) {
            OutputStream fileOutputStream = new FileOutputStream(tmpFile)
            FileChannel fileChannel = fileOutputStream.getChannel()
            fileChannel.transferFrom(channel, 0, Long.MAX_VALUE);
            fileOutputStream.close();
        }
        copy(tmpFile.getAbsolutePath(), to)
        if (!tmpFile.delete()) {
            tmpFile.deleteOnExit()
        }
    }

    /**
     *
     * @param from the path to copy the resource from
     * @param to the target path on the server to put the file on
     */
    void copy(String from, String to) {
        ssh.upload(from, to);
    }

    void chown(String file, String userName) {

    }

    void chmod(String file, String mode) {

    }

    String restCall(URL url, String method) {
        return "";
    }
}
