/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package se.alipsa.pd

import se.alipsa.pd.util.IOUtil

class Deployment {

    String sshUser = null
    String sshPassword = null
    String targetHost
    Ssh ssh

    Deployment(String sshUser, String sshPassword, String targetHost) {
        this.sshUser = sshUser
        this.sshPassword = sshPassword
        this.targetHost = targetHost
        ssh = new Ssh(targetHost, sshUser, sshPassword)
    }

    String createUser(String userName, String group) {
        return ssh.eval(
                """
                if id ${userName} > /dev/null 2>&1; then \n
                    echo "user ${userName} already exists" \\n
                else
                    sudo useradd -g ${group} ${userName}\\n                  
                fi
                """.stripIndent()
        )
    }

    String removeUser(String userName) {
        return ssh.eval("""
                if id ${userName} > /dev/null 2>&1; then \n
                    sudo userdel ${userName}\n
                else  
                    echo "user ${userName} does not exists" \n
                fi
                """.stripIndent()
        )
    }

    void createService(String serviceName) {

    }

    String stopService(String serviceName, type="systemd") {
        if ("systemd" != type) {
            throw new InputException("Only systemd services are currently supported")
        }
        // TODO: what should we do if the service does not exist?
        return ssh.eval("sudo systemctl stop ${serviceName}")
    }

    String startService(String serviceName, type="systemd") {
        if ("systemd" != type) {
            throw new InputException("Only systemd services are currently supported")
        }
        // TODO: what should we do if the service does not exist?
        return ssh.eval("sudo systemctl start ${serviceName}")
    }

    def mkdir(String path) {
        return mkdir(path, sshUser)
    }

    def mkdir(String path, String owner) {
        return ssh.eval("sudo mkdir -p ${path} && sudo chown ${owner} ${path}")
    }

    def mkdir(String path, String owner, String group) {
        return ssh.eval("sudo mkdir ${path} && sudo chown ${owner}:${group} ${path}")
    }

    def mkdir(String path, String owner, String group, String permissions) {
        return ssh.eval("sudo mkdir ${path} && sudo chown ${owner}:${group} ${path} && sudo chmod ${permissions} ${path}")
    }

    /**
     *
     * @param from the url to pull the resource from
     * @param to the target path on the server to put the file on
     */
    void copy(URL from, String to) throws IOException {
        // apache.sshd does not allow streaming without knowing the size in advance so we need to download first
        def tmpFile = File.createTempFile("copy", ".tmp")
        IOUtil.download(from, tmpFile)
        copy(tmpFile.getAbsolutePath(), to)
        if (!tmpFile.delete()) {
            tmpFile.deleteOnExit()
        }
    }

    /**
     *
     * @param from the local path to copy the resource from
     * @param to the target path on the server to put the file on
     */
    void copy(String from, String to) {
        ssh.upload(from, to)
    }

    String ssh(String cmd) {
        return ssh.eval(cmd)
    }

    void chown(String file, String userName) {

    }

    void chmod(String file, String mode) {

    }

    String restCall(URL url, String method) {
        return ""
    }
}
